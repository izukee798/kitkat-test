local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Izukee Test Script",
   LoadingTitle = "Testing",
   LoadingSubtitle = "Izukee",
   Theme = "Default",
   ToggleUIKeybind = "K",
   ConfigurationSaving = {
      Enabled = true,
      FileName = "Test Hub"
   },
   KeySystem = false
})

local Tab = Window:CreateTab("Main", 4483362458)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local Player = Players.LocalPlayer
local humanoid = nil
local flying = false
local flySpeed = 50
local flyBodyVelocity = nil
local flyBodyGyro = nil

-- Update humanoid on respawn
Player.CharacterAdded:Connect(function(char)
   humanoid = char:WaitForChild("Humanoid")
end)
humanoid = Player.Character and Player.Character:FindFirstChildOfClass("Humanoid")

-- Infinite Jump Toggle
local infiniteJumpEnabled = false
local jumpConnection = nil

Tab:CreateToggle({
   Name = "Infinite Jump",
   CurrentValue = false,
   Callback = function(state)
      infiniteJumpEnabled = state
      if infiniteJumpEnabled then
         if not jumpConnection then
            jumpConnection = UserInputService.JumpRequest:Connect(function()
               local character = Player.Character or Player.CharacterAdded:Wait()
               local hum = character:FindFirstChildOfClass("Humanoid")
               if hum then
                  hum:ChangeState(Enum.HumanoidStateType.Jumping)
               end
            end)
         end
      else
         if jumpConnection then
            jumpConnection:Disconnect()
            jumpConnection = nil
         end
      end
   end
})

-- WalkSpeed Slider
local defaultSpeed = 16

Tab:CreateSlider({
   Name = "WalkSpeed",
   Min = 16,
   Max = 100,
   Increment = 1,
   Suffix = "speed",
   CurrentValue = defaultSpeed,
   Callback = function(value)
      if humanoid then
         humanoid.WalkSpeed = value
      end
   end,
})

-- Fly Toggle & Speed Slider
local function toggleFly(state)
   local character = Player.Character
   if not character then return end
   local hrp = character:FindFirstChild("HumanoidRootPart")
   if not hrp then return end

   flying = state

   if flying then
      flyBodyVelocity = Instance.new("BodyVelocity")
      flyBodyVelocity.Velocity = Vector3.new(0, 0, 0)
      flyBodyVelocity.MaxForce = Vector3.new(1e5, 1e5, 1e5)
      flyBodyVelocity.Parent = hrp

      flyBodyGyro = Instance.new("BodyGyro")
      flyBodyGyro.MaxTorque = Vector3.new(1e5, 1e5, 1e5)
      flyBodyGyro.P = 1e4
      flyBodyGyro.CFrame = hrp.CFrame
      flyBodyGyro.Parent = hrp
   else
      if flyBodyVelocity then
         flyBodyVelocity:Destroy()
         flyBodyVelocity = nil
      end
      if flyBodyGyro then
         flyBodyGyro:Destroy()
         flyBodyGyro = nil
      end
   end
end

Tab:CreateToggle({
   Name = "Fly",
   CurrentValue = false,
   Callback = function(state)
      toggleFly(state)
   end,
})

Tab:CreateSlider({
   Name = "Fly Speed",
   Min = 10,
   Max = 200,
   Increment = 5,
   Suffix = "",
   CurrentValue = flySpeed,
   Callback = function(value)
      flySpeed = value
   end,
})

-- Fly movement update
RunService.Heartbeat:Connect(function()
   if flying and flyBodyVelocity and flyBodyGyro and Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
      local hrp = Player.Character.HumanoidRootPart
      local camCFrame = workspace.CurrentCamera.CFrame
      local moveDir = Vector3.new()

      local forward = camCFrame.LookVector
      local right = camCFrame.RightVector

      if UserInputService:IsKeyDown(Enum.KeyCode.W) then
         moveDir = moveDir + forward
      end
      if UserInputService:IsKeyDown(Enum.KeyCode.S) then
         moveDir = moveDir - forward
      end
      if UserInputService:IsKeyDown(Enum.KeyCode.A) then
         moveDir = moveDir - right
      end
      if UserInputService:IsKeyDown(Enum.KeyCode.D) then
         moveDir = moveDir + right
      end
      if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
         moveDir = moveDir + Vector3.new(0, 1, 0)
      end
      if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
         moveDir = moveDir - Vector3.new(0, 1, 0)
      end

      moveDir = moveDir.Unit
      if moveDir ~= moveDir then moveDir = Vector3.new() end -- handle NaN

      flyBodyVelocity.Velocity = moveDir * flySpeed
      flyBodyGyro.CFrame = camCFrame
   end
end)

-- Noclip Toggle
local noclipEnabled = false
local noclipConnection = nil

Tab:CreateToggle({
   Name = "Noclip",
   CurrentValue = false,
   Callback = function(state)
      noclipEnabled = state

      if noclipEnabled then
         noclipConnection = RunService.Stepped:Connect(function()
            if Player.Character then
               for _, part in pairs(Player.Character:GetChildren()) do
                  if part:IsA("BasePart") and part.CanCollide then
                     part.CanCollide = false
                  end
               end
            end
         end)
      else
         if noclipConnection then
            noclipConnection:Disconnect()
            noclipConnection = nil
         end
         -- Restore CanCollide true on character parts
         if Player.Character then
            for _, part in pairs(Player.Character:GetChildren()) do
               if part:IsA("BasePart") then
                  part.CanCollide = true
               end
            end
         end
      end
   end
})

-- ESP with name, health bar, distance
local espEnabled = false
local espObjects = {}

local function createESP(player)
    if espObjects[player] then return end -- already created

    local char = player.Character
    if not char then return end

    local hrp = char:FindFirstChild("HumanoidRootPart")
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if not hrp or not humanoid then return end

    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Name = "ESPBillboard"
    billboardGui.Adornee = hrp
    billboardGui.Size = UDim2.new(0, 150, 0, 50)
    billboardGui.AlwaysOnTop = true
    billboardGui.Parent = hrp

    local frame = Instance.new("Frame")
    frame.BackgroundTransparency = 0.4
    frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    frame.Size = UDim2.new(1, 0, 1, 0)
    frame.Parent = billboardGui

    local nameLabel = Instance.new("TextLabel")
    nameLabel.Size = UDim2.new(1, 0, 0.4, 0)
    nameLabel.BackgroundTransparency = 1
    nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    nameLabel.TextStrokeTransparency = 0
    nameLabel.Font = Enum.Font.SourceSansBold
    nameLabel.TextSize = 14
    nameLabel.Text = player.Name
    nameLabel.Parent = frame

    local healthBarBg = Instance.new("Frame")
    healthBarBg.Size = UDim2.new(1, -10, 0.3, 0)
    healthBarBg.Position = UDim2.new(0, 5, 0.5, 0)
    healthBarBg.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    healthBarBg.BackgroundTransparency = 0.6
    healthBarBg.BorderSizePixel = 0
    healthBarBg.Parent = frame

    local healthBar = Instance.new("Frame")
    healthBar.Size = UDim2.new(humanoid.Health / humanoid.MaxHealth, 0, 1, 0)
    healthBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    healthBar.BorderSizePixel = 0
    healthBar.Parent = healthBarBg

    local distLabel = Instance.new("TextLabel")
    distLabel.Size = UDim2.new(1, 0, 0.3, 0)
    distLabel.Position = UDim2.new(0, 0, 0.8, 0)
    distLabel.BackgroundTransparency = 1
    distLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    distLabel.TextStrokeTransparency = 0.7
    distLabel.Font = Enum.Font.SourceSans
    distLabel.TextSize = 12
    distLabel.Text = "Distance: 0"
    distLabel.Parent = frame

    espObjects[player] = {
        Billboard = billboardGui,
        HealthBar = healthBar,
        DistanceLabel = distLabel,
        Humanoid = humanoid,
        HRP = hrp,
    }
end

local function removeESP(player)
    if espObjects[player] then
        espObjects[player].Billboard:Destroy()
        espObjects[player] = nil
    end
end

local function updateESP()
    for player, esp in pairs(espObjects) do
        local humanoid = esp.Humanoid
        if humanoid and humanoid.Parent then
            local healthPercent = math.clamp(humanoid.Health / humanoid.MaxHealth, 0, 1)
            esp.HealthBar.Size = UDim2.new(healthPercent, 0, 1, 0)

            local dist = 0
            if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
                dist = (esp.HRP.Position - Player.Character.HumanoidRootPart.Position).Magnitude
            end
            esp.DistanceLabel.Text = ("Distance: %.1f"):format(dist)
        else
            removeESP(player)
        end
    end
end

local function refreshESP()
    if not espEnabled then
        for player, _ in pairs(espObjects) do
            removeESP(player)
        end
        return
    end

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= Player then
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character:FindFirstChildOfClass("Humanoid") then
                if not espObjects[player] then
                    createESP(player)
                end
            else
                removeESP(player)
            end
        end
    end
end

Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        if espEnabled then
            refreshESP()
        end
    end)
end)

Players.PlayerRemoving:Connect(function(player)
    removeESP(player)
end)

RunService.RenderStepped:Connect(function()
    if espEnabled then
        updateESP()
    end
end)

Tab:CreateToggle({
    Name = "ESP",
    CurrentValue = false,
    Flag = "ESPToggle",
    Callback = function(state)
        espEnabled = state
        refreshESP()
    end,
})

local PlantsTab = Window:CreateTab("Plants ESP", 4483362458) -- Use any icon ID you like

local espEnabled = false
local espObjects = {}

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local localPlayer = Players.LocalPlayer

local plantsFolder = workspace.Farm:GetChildren()[3].Important.Plants_Physical

local function createPlantESP(plant)
    if espObjects[plant] then return end

    local mainPart = plant.PrimaryPart or plant:FindFirstChildWhichIsA("BasePart")
    if not mainPart then return end

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "PlantESP"
    billboard.Adornee = mainPart
    billboard.Size = UDim2.new(0, 100, 0, 40)
    billboard.AlwaysOnTop = true
    billboard.Parent = mainPart

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeTransparency = 0
    label.Font = Enum.Font.SourceSansBold
    label.TextSize = 14
    label.Text = plant.Name
    label.Parent = billboard

    espObjects[plant] = billboard
end

local function removePlantESP(plant)
    if espObjects[plant] then
        espObjects[plant]:Destroy()
        espObjects[plant] = nil
    end
end

local function updatePlantESP()
    for plant, billboard in pairs(espObjects) do
        if plant.PrimaryPart and localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (plant.PrimaryPart.Position - localPlayer.Character.HumanoidRootPart.Position).Magnitude
            billboard.TextLabel.Text = string.format("%s\n%.1f studs", plant.Name, distance)
        else
            removePlantESP(plant)
        end
    end
end

local function refreshPlantESP()
    for _, plant in pairs(plantsFolder:GetChildren()) do
        if plant:IsA("Model") or plant:IsA("BasePart") then
            if not espObjects[plant] then
                createPlantESP(plant)
            end
        end
    end

    for plant, _ in pairs(espObjects) do
        if not plant or not plant.Parent then
            removePlantESP(plant)
        end
    end
end

RunService.RenderStepped:Connect(function()
    if espEnabled then
        updatePlantESP()
    end
end)

PlantsTab:CreateToggle({
    Name = "Enable Plants ESP",
    CurrentValue = false,
    Flag = "PlantsESP_Toggle",
    Callback = function(state)
        espEnabled = state
        if espEnabled then
            refreshPlantESP()
        else
            for plant, _ in pairs(espObjects) do
                removePlantESP(plant)
            end
        end
    end,
})
